/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace Voting {
      
    export type ProposalStruct = {title: string, voteCount: BigNumberish}

    export type ProposalStructOutput = [title: string, voteCount: bigint] & {title: string, voteCount: bigint }
  
    }

  export interface VotingInterface extends Interface {
    getFunction(nameOrSignature: "addProposals" | "addVoters" | "getAllProposals" | "getPhase" | "getProposal" | "nextPhase" | "owner" | "phase" | "pickWinner" | "proposalMembers" | "showProposals" | "totalVoters" | "vote" | "voterMembers" | "winnerName"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "PhaseChanged" | "ProposalAdded" | "Voted" | "VoterAdded"): EventFragment;

    encodeFunctionData(functionFragment: 'addProposals', values: [string]): string;
encodeFunctionData(functionFragment: 'addVoters', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getAllProposals', values?: undefined): string;
encodeFunctionData(functionFragment: 'getPhase', values?: undefined): string;
encodeFunctionData(functionFragment: 'getProposal', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'nextPhase', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'phase', values?: undefined): string;
encodeFunctionData(functionFragment: 'pickWinner', values?: undefined): string;
encodeFunctionData(functionFragment: 'proposalMembers', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'showProposals', values?: undefined): string;
encodeFunctionData(functionFragment: 'totalVoters', values?: undefined): string;
encodeFunctionData(functionFragment: 'vote', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'voterMembers', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'winnerName', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'addProposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'addVoters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getAllProposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPhase', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getProposal', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nextPhase', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'phase', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'pickWinner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'proposalMembers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'showProposals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'totalVoters', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'vote', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'voterMembers', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'winnerName', data: BytesLike): Result;
  }

  
    export namespace PhaseChangedEvent {
      export type InputTuple = [newPhase: BigNumberish];
      export type OutputTuple = [newPhase: bigint];
      export interface OutputObject {newPhase: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace ProposalAddedEvent {
      export type InputTuple = [index: BigNumberish, name: string];
      export type OutputTuple = [index: bigint, name: string];
      export interface OutputObject {index: bigint, name: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VotedEvent {
      export type InputTuple = [voterAddress: AddressLike, proposalId: BigNumberish];
      export type OutputTuple = [voterAddress: string, proposalId: bigint];
      export interface OutputObject {voterAddress: string, proposalId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace VoterAddedEvent {
      export type InputTuple = [voterAddress: AddressLike];
      export type OutputTuple = [voterAddress: string];
      export interface OutputObject {voterAddress: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Voting extends BaseContract {
    
    connect(runner?: ContractRunner | null): Voting;
    waitForDeployment(): Promise<this>;

    interface: VotingInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addProposals: TypedContractMethod<
      [proposalName: string, ],
      [void],
      'nonpayable'
    >
    

    
    addVoters: TypedContractMethod<
      [voter: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    getAllProposals: TypedContractMethod<
      [],
      [Voting.ProposalStructOutput[]],
      'view'
    >
    

    
    getPhase: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    getProposal: TypedContractMethod<
      [index: BigNumberish, ],
      [[string, bigint] & {title: string, voteCount: bigint }],
      'view'
    >
    

    
    nextPhase: TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    phase: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    pickWinner: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    proposalMembers: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint] & {title: string, voteCount: bigint }],
      'view'
    >
    

    
    showProposals: TypedContractMethod<
      [],
      [Voting.ProposalStructOutput[]],
      'view'
    >
    

    
    totalVoters: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    vote: TypedContractMethod<
      [index: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    voterMembers: TypedContractMethod<
      [arg0: AddressLike, ],
      [[boolean, bigint] & {voted: boolean, vote: bigint }],
      'view'
    >
    

    
    winnerName: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addProposals'): TypedContractMethod<
      [proposalName: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'addVoters'): TypedContractMethod<
      [voter: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'getAllProposals'): TypedContractMethod<
      [],
      [Voting.ProposalStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'getPhase'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getProposal'): TypedContractMethod<
      [index: BigNumberish, ],
      [[string, bigint] & {title: string, voteCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'nextPhase'): TypedContractMethod<
      [],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'phase'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'pickWinner'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'proposalMembers'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[string, bigint] & {title: string, voteCount: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'showProposals'): TypedContractMethod<
      [],
      [Voting.ProposalStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'totalVoters'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'vote'): TypedContractMethod<
      [index: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'voterMembers'): TypedContractMethod<
      [arg0: AddressLike, ],
      [[boolean, bigint] & {voted: boolean, vote: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'winnerName'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'PhaseChanged'): TypedContractEvent<PhaseChangedEvent.InputTuple, PhaseChangedEvent.OutputTuple, PhaseChangedEvent.OutputObject>;
getEvent(key: 'ProposalAdded'): TypedContractEvent<ProposalAddedEvent.InputTuple, ProposalAddedEvent.OutputTuple, ProposalAddedEvent.OutputObject>;
getEvent(key: 'Voted'): TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;
getEvent(key: 'VoterAdded'): TypedContractEvent<VoterAddedEvent.InputTuple, VoterAddedEvent.OutputTuple, VoterAddedEvent.OutputObject>;

    filters: {
      
      'PhaseChanged(uint8)': TypedContractEvent<PhaseChangedEvent.InputTuple, PhaseChangedEvent.OutputTuple, PhaseChangedEvent.OutputObject>;
      PhaseChanged: TypedContractEvent<PhaseChangedEvent.InputTuple, PhaseChangedEvent.OutputTuple, PhaseChangedEvent.OutputObject>;
    

      'ProposalAdded(uint256,string)': TypedContractEvent<ProposalAddedEvent.InputTuple, ProposalAddedEvent.OutputTuple, ProposalAddedEvent.OutputObject>;
      ProposalAdded: TypedContractEvent<ProposalAddedEvent.InputTuple, ProposalAddedEvent.OutputTuple, ProposalAddedEvent.OutputObject>;
    

      'Voted(address,uint256)': TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;
      Voted: TypedContractEvent<VotedEvent.InputTuple, VotedEvent.OutputTuple, VotedEvent.OutputObject>;
    

      'VoterAdded(address)': TypedContractEvent<VoterAddedEvent.InputTuple, VoterAddedEvent.OutputTuple, VoterAddedEvent.OutputObject>;
      VoterAdded: TypedContractEvent<VoterAddedEvent.InputTuple, VoterAddedEvent.OutputTuple, VoterAddedEvent.OutputObject>;
    
    };
  }